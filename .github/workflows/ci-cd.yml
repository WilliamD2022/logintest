deploy-mock:
  name: CD (mock) - simular deploy
  runs-on: ubuntu-latest
  needs: [deploy-pages]
  # roda apenas em push no main e nunca em pull_request
  if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
  env:
    # permite trocar o modo via "Run workflow" (mock|real)
    DEPLOY_MODE: ${{ github.event.inputs.deploy_mode || 'mock' }}
    # flag de seguranca para impedir deploy real neste job
    REAL_DEPLOY: "false"

  steps:
    # 1) Obter o codigo
    - name: Checkout
      uses: actions/checkout@v4

    # 2) Preparar Java 17
    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17
        cache: maven

    # 3) Construir JAR atualizado (sem testes)
    - name: Garantir JAR (skip tests)
      run: mvn -q -B -U -DskipTests -f ./pom.xml clean package

    # 4) Localizar JAR gerado
    - name: Localizar JAR
      id: jar
      run: |
        JAR_PATH=$(ls target/*.jar | head -n1)
        echo "jar_path=$JAR_PATH" >> $GITHUB_OUTPUT
        echo "JAR: $JAR_PATH"

    # 5) Ler versao do pom.xml
    - name: Extrair versao (Maven)
      id: ver
      run: |
        VERSION=$(mvn -q -f ./pom.xml -DforceStdout help:evaluate -Dexpression=project.version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Versao: $VERSION"

    # 6) Gerar release-notes de auditoria
    - name: release-notes.txt (mock)
      run: |
        mkdir -p target/mock
        cat > target/mock/release-notes.txt <<EOF
        Projeto: Simple Auth API
        Versao:  ${{ steps.ver.outputs.version }}
        Commit:  ${GITHUB_SHA}
        Autor:   ${GITHUB_ACTOR}
        Branch:  ${GITHUB_REF_NAME}
        Data:    $(date -u +"%Y-%m-%dT%H:%M:%SZ")
        Modo:    ${DEPLOY_MODE} (REAL_DEPLOY=${REAL_DEPLOY})
        EOF

    # 7) Gerar log simulando os passos de deploy
    - name: deployment.log (mock)
      run: |
        cat > target/mock/deployment.log <<'EOF'
        [MOCK] Iniciando pipeline de deploy...
        [MOCK] Validando artefatos (JAR/relatorios)...
        [MOCK] Target hipotetico: EC2/ECS (simulado)
        [MOCK] Simulando SCP para /opt/logintest/app.jar
        [MOCK] Simulando systemctl restart logintest
        [MOCK] Health-check ficticio: GET http://localhost:8080/actuator/health
        [MOCK] Deployment concluido (simulado).
        EOF

    # 8) Empacotar artefatos de deploy mock
    - name: Empacotar mock-deploy.zip
      run: |
        cp "${{ steps.jar.outputs.jar_path }}" target/mock/app.jar
        (cd target && zip -r mock-deploy.zip mock)
        echo "Gerado: target/mock-deploy.zip"

    # 9) Publicar artefatos para download no Actions
    - name: Publicar artefatos de CD (mock)
      uses: actions/upload-artifact@v4
      with:
        name: mock-deploy
        path: |
          target/mock-deploy.zip
          target/mock/release-notes.txt
          target/mock/deployment.log
        if-no-files-found: error

    # 10) Guarda-corpo: nunca permitir deploy real aqui
    - name: Guard-rail (bloquear deploy real aqui)
      if: env.REAL_DEPLOY == 'true'
      run: |
        echo "::error::REAL_DEPLOY=true, mas este job e MOCK. Abortando."
        exit 1
